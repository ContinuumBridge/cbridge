#!/usr/bin/env python
# Copyright (C) ContinuumBridge Limited, 2014 - All Rights Reserved
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential
# Written by Peter Claydon
#
"""
The cb command allows a user to create and modify bridges, app and devices.
Eg:
cb --bridge init
cb --bridge init --user me@myself.com --password mypassword
cb --app init config.json

"""
THISBRIDGE = "/opt/cbridge/thisbridge/thisbridge.sh"
import requests
from requests.auth import HTTPBasicAuth
from datetime import datetime
import json
import time
import sys
import click
from os import rename
from os.path import expanduser

def login(user, password):
    print "Logging in"
    url = "http://54.72.38.223/api/user/v1/user_auth/login/"
    headers = {'Content-Type': 'application/json'}
    data = {
            "email": user,
            "password": password
           }
    r = requests.post(url, data=json.dumps(data), headers=headers)
    print "status:    ", r.status_code
    if r.status_code == 200:
        sessionid = r.cookies['sessionid']
    else:
        sessionid = ""
    return sessionid

def logout(sessionid):
    print "Logging out"
    url = "http://54.72.38.223/api/user/v1/user_auth/logout/"
    data = {}
    headers = {'Content-Type': 'application/json'}
    cookies = {'sessionid': sessionid}
    r = requests.post(url, data=json.dumps(data), headers=headers, cookies=cookies)
    print "status:    ", r.status_code

def changeLine(key, value):
    tmpfile = "thisbridge.tmp"
    newline = "export " + key + "=" + value + "\n"
    replaced = False
    with open(THISBRIDGE, "r") as fi:
        with open(tmpfile, "w") as fo:
            for line in fi:
                if key in line:
                    line = newline
                    replaced = True
                fo.write(line)
            if not replaced:
                fo.write(newline)
    rename(tmpfile, THISBRIDGE)

def keyExists(key):
    found = False
    with open(THISBRIDGE, "r") as fi:
        for line in fi:
            if key in line:
                found = True
                break
    return found

@click.command()
@click.option('--bridge', nargs=1, help='options: init, rm')
@click.option('--app', nargs=2, help='Usage: init|rm|mod <config file name>')
@click.option('--device', nargs=2, help='Two options: init|rm|mod <config file name>')
#@click.option('--user', prompt='User name', help='Username')
@click.option('--user', help='Username')
#@click.option('--password', prompt=True, hide_input=True, help='Password. If not specified a prompt will be given')
@click.option('--password', help='Password')
@click.option('--dev', help='Turns development mode on or off')
@click.option('--zwave', help='Turns zwave mode on or off')
@click.option('--log', nargs=1, help='options: log, info, warning or error')
@click.option('--param', nargs=2, help='Usage: <key> <value>')

def cb(bridge, app, device, user, password, dev, zwave, log, param):

    if bridge:
        if not user or not password:
            print "Usage: cb --bridge [init|rm] --user <user_name> --password <password>"
            exit()
    if app:
        print "cb --app not yet supported. Please contact ContinuumBridge."
        exit()
        if not user or not password:
            print "Usage: cb --app [init|rm] --user <user_name> --password <password>"
            exit()
    if device:
        if not user or not password:
            print "Usage: cb --device [init|rm] --user <user_name> --password <password>"
            exit()
    if bridge == "init":
        sessionid = login(user, password) 
        if sessionid:
            print "Creating bridge"
            url = "http://54.72.38.223/api/bridge/v1/bridge/"
            data = {"name": "myname"}
            headers = {'Content-Type': 'application/json'}
            cookies = {'sessionid': sessionid}
            r = requests.post(url, data=json.dumps(data), headers=headers, cookies=cookies)
            print "status:    ", r.status_code
            if keyExists("CB_BRIDGE_EMAIL"):
                print "Bridge already initialised. Did you intend to re-init? Use cb --bridge rm to remove before re-init."
            else:
                changeLine("CB_BRIDGE_EMAIL", "'" + r.content["email"] + "'")
                changeLine("CB_BRIDGE_EMAIL", "'" + r.content["password"] + "'")
                print "Created new bridge:"
                print "Bridge ID: ", r.content["cbid"]
                print "url:       ", r.content["resource_url"]
        else:
            print "Unable to create bridge"
        logout(sessionid)
    if dev == "on":
        changeLine("CB_DEV_BRIDGE", "'True'")
    elif dev == "off":
        changeLine("CB_DEV_BRIDGE", "'False'")
    if log:
        if log.upper() not in ["DEBUG", "INFO", "WARNING", "ERROR"]:
            print "logging level must be one of: debug, info, warning or error"
        else:
            changeLine("CB_LOG_ENVIRONMENT", "'" + log.upper() +"'")
    if zwave == "on":
        changeLine("CB_ZWAVE_BRIDGE", "'True'")
    elif zwave == "off":
        changeLine("CB_ZWAVE_BRIDGE", "'False'")
    if param:
        changeLine(param[0], "'" + param[1] +"'")
    if app:
        print "cb --app not yet supported. Please contact ContinuumBridge."
        exit()
        if app[0]  == "init":
            configFile = app[1]
            try:
                with open(configFile, 'r') as configFile:
                    config = json.load(configFile)
                    configRead = True
                    print "Read file: ", configFile
            except:
                print "No config file exists or file is corrupt: ", configFile
                success= False
            if 'description' not in config:
                print "No description found in file: ", configFile
                exit()
            elif 'exe' not in config:
                print "No exe found in file: ", configFile
                exit()
            elif 'name' not in config:
                print "No name found in file: ", configFile
                exit()
            elif 'provider' not in config:
                print "No provider found in file: ", configFile
                exit()
            elif 'url' not in config:
                print "No url found in file: ", configFile
                exit()
            elif 'version' not in config:
                print "No version found in file: ", configFile
                exit()
            else:
                print "Config OK"
            appConfig = {}
            appConfig['description'] = config['description']
            appConfig['exe'] = config['exe']
            appConfig['name'] = config['name']
            appConfig['provider'] = config['provider']
            appConfig['url'] = config['url']
            appConfig['version'] = config['version']
            sessionid = login(user, password) 
     
            print "Creating app"
            url = "http://54.72.38.223/api/bridge/v1/app/"
            data = appConfig
            headers = {'Content-Type': 'application/json'}
            cookies = {'sessionid': sessionid}
            r = requests.post(url, data=json.dumps(data), headers=headers, cookies=cookies)
            print "status:    ", r.status_code
            print "text:      ", r.text
            print "headers:   ", r.headers
            print "content:   ", r.content
            print "cookies:   ", r.cookies
    
            logout(sessionid)
            print "Logging out"
        elif app[0]  == "rm":
            pass
    if device:
        if device[0]  == "init":
            configFile = device[1]
            try:
                with open(configFile, 'r') as configFile:
                    config = json.load(configFile)
                    configRead = True
                    print "Read file: ", configFile
            except:
                print "No config file exists or file is corrupt: ", configFile
                success= False
            if 'description' not in config:
                print "No description found in file: ", configFile
                exit()
            elif 'exe' not in config:
                print "No exe found in file: ", configFile
                exit()
            elif 'name' not in config:
                print "No name found in file: ", configFile
                exit()
            elif 'provider' not in config:
                print "No provider found in file: ", configFile
                exit()
            elif 'url' not in config:
                print "No url found in file: ", configFile
                exit()
            elif 'version' not in config:
                print "No version found in file: ", configFile
                exit()
            elif 'protocol' not in config:
                print "No protocol found in file: ", configFile
                exit()
            else:
                print "Config OK"
            appConfig = {}
            appConfig['description'] = config['description']
            appConfig['name'] = config['name']
            appConfig['protocol'] = config['protocol']
            sessionid = login(user, password) 
     
            print "Creating device"
            url = "http://54.72.38.223/api/bridge/v1/device/"
            data = appConfig
            headers = {'Content-Type': 'application/json'}
            cookies = {'sessionid': sessionid}
            r = requests.post(url, data=json.dumps(data), headers=headers, cookies=cookies)
            print "status:    ", r.status_code
            print "text:      ", r.text
            print "headers:   ", r.headers
            print "content:   ", r.content
            print "cookies:   ", r.cookies
    
            print "Creating adaptor"
            appConfig = {}
            appConfig['description'] = config['description']
            appConfig['exe'] = config['exe']
            appConfig['name'] = config['name']
            appConfig['provider'] = config['provider']
            appConfig['url'] = config['url']
            appConfig['version'] = config['version']
            appConfig['protocol'] = config['protocol']
            url = "http://54.72.38.223/api/bridge/v1/adaptor/"
            data = appConfig
            r = requests.post(url, data=json.dumps(data), headers=headers, cookies=cookies)
            print "status:    ", r.status_code
            print "text:      ", r.text
            print "headers:   ", r.headers
            print "content:   ", r.content
            print "cookies:   ", r.cookies

            logout(sessionid)
            print "Logging out"

if __name__ == '__main__':
    cb()

